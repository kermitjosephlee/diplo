generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  // uuid          String      @unique
  name          String
  userName      String      @unique
  email         String      @unique
  chatServiceId Int
  startDate     DateTime    @default(now())
  endDate       DateTime?
  isActive      Boolean     @default(true)
  password      String
  chatService   ChatService @relation(fields: [chatServiceId], references: [id])
  player        Player[]
}

model Game {
  id        Int       @id @default(autoincrement())
  // uuid      String    @unique
  name      String
  startDate DateTime  @default(now())
  endDate   DateTime?
  gameLog   String[]
  mapId     Int       @unique
  map       Map[]
  player    Player[]
  turn      Turn[]
}

model Country {
  id           Int                 @id @default(autoincrement())
  abbreviation CountryAbbreviation
  name         CountryName
  adjective    CountryAdjective
  Location     Location?           @relation(fields: [locationId], references: [id])
  locationId   Int?
}

model Player {
  id        Int     @id @default(autoincrement())
  userId    Int
  gameId    Int
  isActive  Boolean @default(false)
  isWinner  Boolean @default(false)
  countryId Int
  game      Game    @relation(fields: [gameId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
  orders    Order[]
}

model Turn {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  finalizedAt DateTime
  gameId      Int?
  game        Game?      @relation(fields: [gameId], references: [id])
  year        Int
  phase       PhaseEnum
  season      SeasonEnum
  mapId       Int
  map         Map        @relation(fields: [mapId], references: [id])
  orders      Order[]
}

model Order {
  id               Int        @id @default(autoincrement())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime[]
  orders           String
  turnId           Int
  originId         Int
  destinationId    Int
  unitType         Unit
  coast            Coast?
  actionType       ActionType @default(HOLD)
  supportingUnitId Int?
  playerId         Int
  player           Player     @relation(fields: [playerId], references: [id])
  turn             Turn       @relation(fields: [turnId], references: [id])
}

model Location {
  id                         Int                  @id @default(autoincrement())
  name                       String
  shortName                  LocationAbbreviation
  isMaritime                 Boolean
  isTerrestrial              Boolean
  isLandLocked               Boolean
  isSupplyCenter             Boolean
  occupyingNationsId         Int
  occupyingNations           Country[]
  initialNation              CountryName?
  coasts                     Coast[]
  borderingLocations         Location[]           @relation("borderingLocations")
  borderingLocationsRelation Location[]           @relation("borderingLocations")
}

model Map {
  id        Int      @id @default(autoincrement())
  gameId    Int
  ordersId  Int      @unique
  svg       String
  createdAt DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id])
  turn      Turn[]
}

model ChatService {
  id                    Int      @id @default(autoincrement())
  serviceProvider       String
  serviceProviderUserId String
  userId                Int      @unique
  createdAt             DateTime @default(now())
  user                  User[]
}

enum Unit {
  ARMY
  NAVY
}

enum ActionType {
  MOVE
  HOLD
  SUPPORT
  CONVOY
}

enum CountryAbbreviation {
  ENG
  FRA
  GER
  AUS
  ITA
  RUS
  TUR
}

enum CountryName {
  England
  France
  Germany
  Austria
  Italy
  Russia
  Turkey
}

enum CountryAdjective {
  English
  French
  German
  Austrian
  Italian
  Russian
  Turkish
}

enum Coast {
  NORTH
  SOUTH
  EAST
}

enum LocationType {
  Maritime
  Terrestrial
}

enum LocationAbbreviation {
  ADR
  AEG
  ALB
  ANK
  APU
  ARM
  BAL
  BAR
  BEL
  BER
  BLA
  BOH
  BOT
  BRE
  BUD
  BUL
  BUR
  CLY
  CON
  DEN
  EAS
  EDI
  ENG
  FIN
  GAL
  GAS
  GRE
  HEL
  HOL
  ION
  IRI
  KIE
  LON
  LVN
  LVP
  LYO
  MAO
  MAR
  MOS
  MUN
  NAF
  NAO
  NAP
  NTH
  NWG
  NWY
  PAR
  PIC
  PIE
  POR
  PRU
  ROM
  RUH
  RUM
  SEV
  SIL
  SKA
  SMY
  SPA
  STP
  SWE
  SYR
  TRI
  TUN
  TUS
  TYR
  TYS
  VEN
  VIE
  WAL
  WAR
  WES
  YOR
}

enum PhaseEnum {
  BUILD
  MOVEMENT
  RETREAT
}

enum SeasonEnum {
  FALL
  SPRING
  SUMMER
  WINTER
}
